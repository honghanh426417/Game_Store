@model List<GameStore.Models.Product>

@{
    ViewData["Title"] = "Home Page";

}
<link rel="stylesheet" href="~/css/Product.css" asp-append-version="true" />

<div class="main-content">

    <div class="banner">
        <h2 class="title-sec">Featured & Recommended  </h2>
        <div class="wrapper">
            <i id="left" class="fa-solid fa-angle-left"></i>
            <div class="carousel-coming">
                @foreach (var product in Model.Take(7))
                {
                    <img src="@product.ImageGame" alt="@product.Name" draggable="false">
                }
            </div>

            <i id="right" class="fa-solid fa-angle-right"></i>
        </div>
    </div>
    <div class="discount-sec">
        <div class="discount-title">
            <div class="discount-title_left">
                <h2 class="title-sec">Games with discounts</h2>
            </div>
            <div class="discount-title_right">
                <a href="#">View More</a>
            </div>
        </div>

        <div class="list-card">
            @foreach (var product in Model.Take(4))
            {
                <div class="game-card">
                    <div class="card-img">
                        <img src="@product.ImageGame" alt="">
                    </div>
                    <div class="card-tag">
                        <a href="#">BASIC GAME</a>
                    </div>
                    <div class="card-name">@product.Name</div>
                    <div class="card-discount">
                        <div class="discount-ptc">-30%</div>
                        <div class="old-price">@product.Price</div>
                        <div class="new-price">$@(product.Price - (product.Price * 30 / 100))</div>
                    </div>
                </div>
            }
        </div>
    </div>

</div>


<script src="path/to/jquery.min.js"></script>
<script src="path/to/bootstrap.bundle.min.js"></script>

<script>const carousel = document.querySelector(".carousel-coming"),
        firstImg = carousel.querySelectorAll("img")[0],
        arrowIcons = document.querySelectorAll(".wrapper i");

    let isDragStart = false, isDragging = false, prevPageX, prevScrollLeft, positionDiff;

    const showHideIcons = () => {
        // showing and hiding prev/next icon according to carousel scroll left value
        let scrollWidth = carousel.scrollWidth - carousel.clientWidth; // getting max scrollable width
        arrowIcons[0].style.display = carousel.scrollLeft == 0 ? "none" : "block";
        arrowIcons[1].style.display = carousel.scrollLeft == scrollWidth ? "none" : "block";
    }

    arrowIcons.forEach(icon => {
        icon.addEventListener("click", () => {
            let firstImgWidth = firstImg.clientWidth + 14; // getting first img width & adding 14 margin value
            // if clicked icon is left, reduce width value from the carousel scroll left else add to it
            carousel.scrollLeft += icon.id == "left" ? -firstImgWidth : firstImgWidth;
            setTimeout(() => showHideIcons(), 60); // calling showHideIcons after 60ms
        });
    });

    const autoSlide = () => {
        // if there is no image left to scroll then return from here
        if (carousel.scrollLeft - (carousel.scrollWidth - carousel.clientWidth) > -1 || carousel.scrollLeft <= 0) return;

        positionDiff = Math.abs(positionDiff); // making positionDiff value to positive
        let firstImgWidth = firstImg.clientWidth + 14;
        // getting difference value that needs to add or reduce from carousel left to take middle img center
        let valDifference = firstImgWidth - positionDiff;

        if (carousel.scrollLeft > prevScrollLeft) { // if user is scrolling to the right
            return carousel.scrollLeft += positionDiff > firstImgWidth / 3 ? valDifference : -positionDiff;
        }
        // if user is scrolling to the left
        carousel.scrollLeft -= positionDiff > firstImgWidth / 3 ? valDifference : -positionDiff;
    }

    const dragStart = (e) => {
        // updatating global variables value on mouse down event
        isDragStart = true;
        prevPageX = e.pageX || e.touches[0].pageX;
        prevScrollLeft = carousel.scrollLeft;
    }

    const dragging = (e) => {
        // scrolling images/carousel to left according to mouse pointer
        if (!isDragStart) return;
        e.preventDefault();
        isDragging = true;
        carousel.classList.add("dragging");
        positionDiff = (e.pageX || e.touches[0].pageX) - prevPageX;
        carousel.scrollLeft = prevScrollLeft - positionDiff;
        showHideIcons();
    }

    const dragStop = () => {
        isDragStart = false;
        carousel.classList.remove("dragging");

        if (!isDragging) return;
        isDragging = false;
        autoSlide();
    }

    carousel.addEventListener("mousedown", dragStart);
    carousel.addEventListener("touchstart", dragStart);

    document.addEventListener("mousemove", dragging);
    carousel.addEventListener("touchmove", dragging);

    document.addEventListener("mouseup", dragStop);
    carousel.addEventListener("touchend", dragStop);</script>

